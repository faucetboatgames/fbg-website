import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

function parseMarkdownFile(content, filename) {
  const lines = content.split('\n')
  let frontMatterStart = -1
  let frontMatterEnd = -1
  
  // Find frontmatter boundaries
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].trim() === '---') {
      if (frontMatterStart === -1) {
        frontMatterStart = i
      } else {
        frontMatterEnd = i
        break
      }
    }
  }
  
  // Parse frontmatter
  const frontMatter = {}
  if (frontMatterStart !== -1 && frontMatterEnd !== -1) {
    for (let i = frontMatterStart + 1; i < frontMatterEnd; i++) {
      const line = lines[i].trim()
      if (line && line.includes(':')) {
        const [key, ...valueParts] = line.split(':')
        let value = valueParts.join(':').trim()
        
        // Remove quotes if present
        if ((value.startsWith('"') && value.endsWith('"')) || 
            (value.startsWith("'") && value.endsWith("'"))) {
          value = value.slice(1, -1)
        }
        
        // Convert boolean strings
        if (value === 'true') value = true
        if (value === 'false') value = false
        
        frontMatter[key.trim()] = value
      }
    }
  }
  
  // Extract content after frontmatter
  const contentStartIndex = frontMatterEnd !== -1 ? frontMatterEnd + 1 : 0
  const markdownContent = lines.slice(contentStartIndex).join('\n').trim()
  
  // Extract summary from content (first paragraph after title)
  const contentLines = markdownContent.split('\n').filter(line => line.trim())
  let summary = ''
  for (const line of contentLines) {
    if (!line.startsWith('#') && line.trim() && !line.startsWith('*') && line.length > 50) {
      summary = line.replace(/\*\*(.*?)\*\*/g, '$1').replace(/\*(.*?)\*/g, '$1').trim()
      if (summary.length > 150) {
        summary = summary.substring(0, 150) + '...'
      }
      break
    }
  }
  
  return {
    id: frontMatter.id || filename.replace('.md', ''),
    title: frontMatter.title || 'Untitled',
    date: frontMatter.date || new Date().toISOString().split('T')[0],
    published: frontMatter.published !== false,
    featured: frontMatter.featured === true,
    content: markdownContent,
    summary: summary || frontMatter.summary || ''
  }
}

function generatePressReleases() {
  const pressReleasesDir = path.resolve(__dirname, '../press-releases')
  const outputDir = path.resolve(__dirname, '../src/data')
  const outputFile = path.join(outputDir, 'press-releases.ts')
  
  if (!fs.existsSync(pressReleasesDir)) {
    console.error('Press releases directory not found:', pressReleasesDir)
    process.exit(1)
  }
  
  // Ensure output directory exists
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true })
  }
  
  const releases = []
  const files = fs.readdirSync(pressReleasesDir).filter(file => 
    file.endsWith('.md') && 
    !file.toLowerCase().includes('readme') &&
    !file.startsWith('.')
  )
  
  for (const file of files) {
    const filePath = path.join(pressReleasesDir, file)
    const content = fs.readFileSync(filePath, 'utf-8')
    const release = parseMarkdownFile(content, file)
    releases.push(release)
  }
  
  // Sort by date (newest first)
  releases.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
  
  // Generate TypeScript file
  const tsContent = `// Auto-generated press releases data
// Do not edit this file directly - edit files in /press-releases/ directory
import type { PressRelease } from '@/types/PressRelease'

export const pressReleasesData: PressRelease[] = ${JSON.stringify(releases, null, 2)}
`
  
  fs.writeFileSync(outputFile, tsContent, 'utf-8')
  console.log(`Generated ${releases.length} press releases to ${outputFile}`)
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  generatePressReleases()
}

export { generatePressReleases }